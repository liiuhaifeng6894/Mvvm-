MVVM DataBinding 介绍

MVVM框架类似于早期的MVC和最热的MVP，但是比起这两个更为强势。MV-VM相比于MVP，

其实就是将Presenter层替换成了ViewModel层，我们都知道，

MVP的好处就是将逻辑代码从View层抽离出来，做到与UI层的低耦合，

但是无形中会创造出许多的接口，有些接口很是冗余，不仅如此，

当后期修改数据或者添加新的功能还需要修改或是添加接口，很是麻烦。

这个时候MV-VM的优势就体现出来了，ViewModel层所需要做的完全就是跟逻辑相关的代码，

完全不会涉及到UI。当数据变化，直接驱动UI的改变，中间省去了冗余的接口。

同时，在ViewModel层编写代码中，要求开发者需要将每个方法尽可能的做的功能单一，

不与外部有任何的引用或者是联系，无形中提高了代码的健壮性，方便了后期的单元测试。

DataBinding其实就是谷歌出台的工具，是实现UI和数据绑定的框架，View和ViewModel通过DataBinding实现单向绑定或双向绑定，做到UI和数据的相互监听，同时开发者的任务分配也就很明确了，

负责ViewModel的小伙伴完全不用考虑UI如何实现，很大程度上提高了代码的开发效率和后期出问题跟踪的准确性，

针对这些好处，采用MVVM进行代码开发还是非常有必要的。






LiveData是新引入的组件架构之一,LiveData是一个可以被观察的数据持有者.这也就意味着应用中的组件能够观察LiveData对象的更改,而无需在它们之间创建明确的和严格的依赖关系。

这将完全分离LiveData对象使用者和LiveData对象生产者。

除此之外,LiveData还有一个很大的好处,LiveData遵守应用程序组件(活动,片段,服务)的生命周期状态,并进组件的生命周期管理,确保LiveData对象的内存泄漏.

根据Google文档,如果您已经在使用Rx或Agera等开源库,那么你可以继续使用它们而不是替换成LiveData.但在这种情况下,您有责任处理每个Android组件生命周期的对象分配和解除分配.

由于LiveData遵从Android的生命周期机制,这意味着除非LiveData主体(activity或fragment)处于活动状态(接收onStart()但未收到onStop()),否则它将不会调用其观察者回调.除此之外,当主体收到onDestroy()时,LiveData也会自动删除观察者防止内存泄漏.

LiveData也会将在下面的MVVM事例中进行说明.


ViewModel也是新引入的体系架构组件之一.架构组件提供了一个名为ViewModel的新类,它负责为UI / View准备数据.

ViewModel为您的MVVM模式中的ViewModel提供了一个很好的基类,因为ViewModel(及其子类AndroidViewModel)的扩展类会在配置更改期间自动保留其数据.这意味着,在配置更改后,此ViewModel所有数据可立即用于下一个活动(activity)或片段(fragment)实例.


